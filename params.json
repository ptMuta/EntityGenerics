{"name":"Entity Generics","tagline":"Generic data entity repository abstractions for Entity Generics and ASP.NET 5","body":"# EntityGenerics\r\nGeneric data entity repository abstractions for Entity Generics and ASP.NET 5\r\n\r\n# How to use\r\n\r\nThe `IEntity<TKey>`\r\n------\r\n\r\nTo ease abstraction and generic usability your entities have to implement this basic interface.\r\n\r\n```c#\r\npublic interface IEntity<TKey>\r\n{\r\n        TKey Id { get; set; }\r\n}\r\n```\r\n\r\n`IRepository` and `IAsyncRepository` interface methods\r\n------\r\n\r\nThe IRepository and IAsyncRepository defined the interfaces for building repositories.\r\nThe following methods are exposed publicly. For `IAsyncRepository` just add Async-suffix to method names.\r\n(eg. AddAsync)\r\n\r\n```c#\r\npublic interface IRepository<in TKey, TEntity, in TViewModel, in TQuery> : IDisposable \r\n    where TEntity : class, IEntity<TKey>, new()\r\n{\r\n    DbSet<TEntity> Entities { get; }\r\n    List<TEntity> ToList();\r\n    EntityEntry<TEntity> Add(TViewModel viewModel);\r\n    EntityEntry<TEntity> Add(TEntity entity);\r\n    IQueryable<TEntity> FindAll(TQuery query = default(TQuery));\r\n    TEntity Find(TKey id);\r\n    TEntity Find(Expression<Func<TEntity, bool>> predicate);\r\n    void Update(TKey id, TViewModel viewModel);\r\n    EntityEntry<TEntity> Remove(TKey id);\r\n    bool Exists(TKey id);\r\n    int SaveChanges();\r\n}\r\n```\r\n\r\n`RepositoryBase` Generic repository base class\r\n------\r\n\r\nThe RepositoryBase-class implements `` and `` interfaces via generics. However in order for it to function fully you need to implement\r\neither one or both of the following methods.\r\n\r\n```c#\r\npublic virtual IQueryable<TEntity> ExecuteQuery(TQuery query)\r\n{\r\n    throw new NotImplementedException();\r\n}\r\n\r\npublic virtual Task<IQueryable<TEntity>> ExecuteQueryAsync(TQuery query, CancellationToken cancellationToken = default(CancellationToken))\r\n{\r\n    throw new NotImplementedException();\r\n}\r\n\r\npublic virtual TViewModel ConvertToViewModel(TEntity entity)\r\n{\r\n    throw new NotImplementedException();\r\n}\r\n\r\npublic virtual Task<TViewModel> ConvertToViewModelAsync(TEntity entity, CancellationToken cancellationToken = default(CancellationToken))\r\n{\r\n    throw new NotImplementedException();\r\n}\r\n\r\npublic virtual void SyncEntity(TEntity entity, TViewModel viewModel)\r\n{\r\n    throw new NotImplementedException();\r\n}\r\n\r\npublic virtual Task SyncEntityAsync(TEntity entity, TViewModel viewModel, CancellationToken cancellationToken = default(CancellationToken))\r\n{\r\n    throw new NotImplementedException();\r\n}\r\n```\r\n\r\nExample\r\n------\r\n\r\nThe following example shows the minimum work needed to create a repository of entities.\r\n\r\n###### Task.cs\r\n```c#\r\npublic class Task : IEntity<int>\r\n{\r\n    public int Id { get; set; }\r\n    public string Description { get; set; }\r\n    public bool Done { get; set; }\r\n    public DateTime? LastChangeAt { get; set; }\r\n}\r\n```\r\n\r\n###### TaskViewModel.cs\r\n```c#\r\npublic class TaskViewModel\r\n{\r\n    public int Id { get; set; }\r\n    public string Description { get; set; }\r\n    public bool Done { get; set; }\r\n    public DateTime? LastChangeAt { get; set; }\r\n}\r\n```\r\n\r\n###### TaskRepository.cs\r\n```c#\r\npublic class TaskRepository : RepositoryBase<int, Task, TaskViewModel, ExampleRepositoryQuery>\r\n{\r\n    public TaskRepository(IDbContext context) : base(context)\r\n    {\r\n    }\r\n\r\n    public TaskRepository(IDbContext context, bool ownsContext) : base(context, ownsContext)\r\n    {\r\n    }\r\n\r\n    public override IQueryable<Task> ExecuteQuery(ExampleRepositoryQuery query)\r\n    {\r\n        var result = Entities.Where(t => t.Description.ToLowerInvariant().Contains(query.Query.ToLowerInvariant()))\r\n            .Skip(query.Page * query.Limit)\r\n            .Take(query.Limit);\r\n\r\n        if (query.HideCompleted)\r\n            result = result.Where(t => !t.Done);\r\n\r\n        return result;\r\n    }\r\n\r\n    public override void SyncEntity(Task entity, TaskViewModel viewModel)\r\n    {\r\n        entity.Description = viewModel.Description;\r\n        entity.Done = viewModel.Done;\r\n        entity.LastChangeAt = DateTime.UtcNow;\r\n    }\r\n\r\n    public override TaskViewModel ConvertToViewModel(Task entity)\r\n    {\r\n        return new TaskViewModel\r\n        {\r\n            Id = entity.Id,\r\n            Description = entity.Description,\r\n            Done = entity.Done,\r\n            LastChangeAt = entity.LastChangeAt\r\n        };\r\n    }\r\n}\r\n```\r\n\r\n# License\r\n\r\nThe MIT License (MIT)\r\n\r\nCopyright (c) 2015 Joona Romppanen\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all\r\ncopies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\nSOFTWARE.\r\n\r\n","google":"UA-70473972-1","note":"Don't delete this file! It's used internally to help with page regeneration."}